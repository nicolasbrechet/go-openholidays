// Package openholidays provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package openholidays

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCountries request
	GetCountries(ctx context.Context, params *GetCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLanguages request
	GetLanguages(ctx context.Context, params *GetLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicHolidays request
	GetPublicHolidays(ctx context.Context, params *GetPublicHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicHolidaysByDate request
	GetPublicHolidaysByDate(ctx context.Context, params *GetPublicHolidaysByDateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchoolHolidays request
	GetSchoolHolidays(ctx context.Context, params *GetSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchoolHolidaysByDate request
	GetSchoolHolidaysByDate(ctx context.Context, params *GetSchoolHolidaysByDateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatisticsPublicHolidays request
	GetStatisticsPublicHolidays(ctx context.Context, params *GetStatisticsPublicHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatisticsSchoolHolidays request
	GetStatisticsSchoolHolidays(ctx context.Context, params *GetStatisticsSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubdivisions request
	GetSubdivisions(ctx context.Context, params *GetSubdivisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCountries(ctx context.Context, params *GetCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCountriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLanguages(ctx context.Context, params *GetLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLanguagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicHolidays(ctx context.Context, params *GetPublicHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicHolidaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicHolidaysByDate(ctx context.Context, params *GetPublicHolidaysByDateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicHolidaysByDateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolHolidays(ctx context.Context, params *GetSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchoolHolidaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchoolHolidaysByDate(ctx context.Context, params *GetSchoolHolidaysByDateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchoolHolidaysByDateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatisticsPublicHolidays(ctx context.Context, params *GetStatisticsPublicHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticsPublicHolidaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatisticsSchoolHolidays(ctx context.Context, params *GetStatisticsSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticsSchoolHolidaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubdivisions(ctx context.Context, params *GetSubdivisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubdivisionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCountriesRequest generates requests for GetCountries
func NewGetCountriesRequest(server string, params *GetCountriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLanguagesRequest generates requests for GetLanguages
func NewGetLanguagesRequest(server string, params *GetLanguagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicHolidaysRequest generates requests for GetPublicHolidays
func NewGetPublicHolidaysRequest(server string, params *GetPublicHolidaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/PublicHolidays")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryIsoCode", runtime.ParamLocationQuery, params.CountryIsoCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validFrom", runtime.ParamLocationQuery, params.ValidFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validTo", runtime.ParamLocationQuery, params.ValidTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubdivisionCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subdivisionCode", runtime.ParamLocationQuery, *params.SubdivisionCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicHolidaysByDateRequest generates requests for GetPublicHolidaysByDate
func NewGetPublicHolidaysByDateRequest(server string, params *GetPublicHolidaysByDateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/PublicHolidaysByDate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolHolidaysRequest generates requests for GetSchoolHolidays
func NewGetSchoolHolidaysRequest(server string, params *GetSchoolHolidaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SchoolHolidays")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryIsoCode", runtime.ParamLocationQuery, params.CountryIsoCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validFrom", runtime.ParamLocationQuery, params.ValidFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validTo", runtime.ParamLocationQuery, params.ValidTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SubdivisionCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subdivisionCode", runtime.ParamLocationQuery, *params.SubdivisionCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchoolHolidaysByDateRequest generates requests for GetSchoolHolidaysByDate
func NewGetSchoolHolidaysByDateRequest(server string, params *GetSchoolHolidaysByDateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SchoolHolidaysByDate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatisticsPublicHolidaysRequest generates requests for GetStatisticsPublicHolidays
func NewGetStatisticsPublicHolidaysRequest(server string, params *GetStatisticsPublicHolidaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Statistics/PublicHolidays")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryIsoCode", runtime.ParamLocationQuery, params.CountryIsoCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SubdivisionCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subdivisionCode", runtime.ParamLocationQuery, *params.SubdivisionCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatisticsSchoolHolidaysRequest generates requests for GetStatisticsSchoolHolidays
func NewGetStatisticsSchoolHolidaysRequest(server string, params *GetStatisticsSchoolHolidaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Statistics/SchoolHolidays")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryIsoCode", runtime.ParamLocationQuery, params.CountryIsoCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SubdivisionCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subdivisionCode", runtime.ParamLocationQuery, *params.SubdivisionCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubdivisionsRequest generates requests for GetSubdivisions
func NewGetSubdivisionsRequest(server string, params *GetSubdivisionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Subdivisions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countryIsoCode", runtime.ParamLocationQuery, params.CountryIsoCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.LanguageIsoCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "languageIsoCode", runtime.ParamLocationQuery, *params.LanguageIsoCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCountriesWithResponse request
	GetCountriesWithResponse(ctx context.Context, params *GetCountriesParams, reqEditors ...RequestEditorFn) (*GetCountriesResponse, error)

	// GetLanguagesWithResponse request
	GetLanguagesWithResponse(ctx context.Context, params *GetLanguagesParams, reqEditors ...RequestEditorFn) (*GetLanguagesResponse, error)

	// GetPublicHolidaysWithResponse request
	GetPublicHolidaysWithResponse(ctx context.Context, params *GetPublicHolidaysParams, reqEditors ...RequestEditorFn) (*GetPublicHolidaysResponse, error)

	// GetPublicHolidaysByDateWithResponse request
	GetPublicHolidaysByDateWithResponse(ctx context.Context, params *GetPublicHolidaysByDateParams, reqEditors ...RequestEditorFn) (*GetPublicHolidaysByDateResponse, error)

	// GetSchoolHolidaysWithResponse request
	GetSchoolHolidaysWithResponse(ctx context.Context, params *GetSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*GetSchoolHolidaysResponse, error)

	// GetSchoolHolidaysByDateWithResponse request
	GetSchoolHolidaysByDateWithResponse(ctx context.Context, params *GetSchoolHolidaysByDateParams, reqEditors ...RequestEditorFn) (*GetSchoolHolidaysByDateResponse, error)

	// GetStatisticsPublicHolidaysWithResponse request
	GetStatisticsPublicHolidaysWithResponse(ctx context.Context, params *GetStatisticsPublicHolidaysParams, reqEditors ...RequestEditorFn) (*GetStatisticsPublicHolidaysResponse, error)

	// GetStatisticsSchoolHolidaysWithResponse request
	GetStatisticsSchoolHolidaysWithResponse(ctx context.Context, params *GetStatisticsSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*GetStatisticsSchoolHolidaysResponse, error)

	// GetSubdivisionsWithResponse request
	GetSubdivisionsWithResponse(ctx context.Context, params *GetSubdivisionsParams, reqEditors ...RequestEditorFn) (*GetSubdivisionsResponse, error)
}

type GetCountriesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]CountryResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLanguagesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]LanguageResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicHolidaysResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]HolidayResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetPublicHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicHolidaysByDateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]HolidayByDateResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetPublicHolidaysByDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicHolidaysByDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchoolHolidaysResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]HolidayResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSchoolHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchoolHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchoolHolidaysByDateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]HolidayByDateResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSchoolHolidaysByDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchoolHolidaysByDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticsPublicHolidaysResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]StatisticsResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetStatisticsPublicHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticsPublicHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticsSchoolHolidaysResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]StatisticsResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetStatisticsSchoolHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticsSchoolHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubdivisionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]SubdivisionResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON500 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSubdivisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubdivisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCountriesWithResponse request returning *GetCountriesResponse
func (c *ClientWithResponses) GetCountriesWithResponse(ctx context.Context, params *GetCountriesParams, reqEditors ...RequestEditorFn) (*GetCountriesResponse, error) {
	rsp, err := c.GetCountries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCountriesResponse(rsp)
}

// GetLanguagesWithResponse request returning *GetLanguagesResponse
func (c *ClientWithResponses) GetLanguagesWithResponse(ctx context.Context, params *GetLanguagesParams, reqEditors ...RequestEditorFn) (*GetLanguagesResponse, error) {
	rsp, err := c.GetLanguages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLanguagesResponse(rsp)
}

// GetPublicHolidaysWithResponse request returning *GetPublicHolidaysResponse
func (c *ClientWithResponses) GetPublicHolidaysWithResponse(ctx context.Context, params *GetPublicHolidaysParams, reqEditors ...RequestEditorFn) (*GetPublicHolidaysResponse, error) {
	rsp, err := c.GetPublicHolidays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicHolidaysResponse(rsp)
}

// GetPublicHolidaysByDateWithResponse request returning *GetPublicHolidaysByDateResponse
func (c *ClientWithResponses) GetPublicHolidaysByDateWithResponse(ctx context.Context, params *GetPublicHolidaysByDateParams, reqEditors ...RequestEditorFn) (*GetPublicHolidaysByDateResponse, error) {
	rsp, err := c.GetPublicHolidaysByDate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicHolidaysByDateResponse(rsp)
}

// GetSchoolHolidaysWithResponse request returning *GetSchoolHolidaysResponse
func (c *ClientWithResponses) GetSchoolHolidaysWithResponse(ctx context.Context, params *GetSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*GetSchoolHolidaysResponse, error) {
	rsp, err := c.GetSchoolHolidays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolHolidaysResponse(rsp)
}

// GetSchoolHolidaysByDateWithResponse request returning *GetSchoolHolidaysByDateResponse
func (c *ClientWithResponses) GetSchoolHolidaysByDateWithResponse(ctx context.Context, params *GetSchoolHolidaysByDateParams, reqEditors ...RequestEditorFn) (*GetSchoolHolidaysByDateResponse, error) {
	rsp, err := c.GetSchoolHolidaysByDate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchoolHolidaysByDateResponse(rsp)
}

// GetStatisticsPublicHolidaysWithResponse request returning *GetStatisticsPublicHolidaysResponse
func (c *ClientWithResponses) GetStatisticsPublicHolidaysWithResponse(ctx context.Context, params *GetStatisticsPublicHolidaysParams, reqEditors ...RequestEditorFn) (*GetStatisticsPublicHolidaysResponse, error) {
	rsp, err := c.GetStatisticsPublicHolidays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticsPublicHolidaysResponse(rsp)
}

// GetStatisticsSchoolHolidaysWithResponse request returning *GetStatisticsSchoolHolidaysResponse
func (c *ClientWithResponses) GetStatisticsSchoolHolidaysWithResponse(ctx context.Context, params *GetStatisticsSchoolHolidaysParams, reqEditors ...RequestEditorFn) (*GetStatisticsSchoolHolidaysResponse, error) {
	rsp, err := c.GetStatisticsSchoolHolidays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticsSchoolHolidaysResponse(rsp)
}

// GetSubdivisionsWithResponse request returning *GetSubdivisionsResponse
func (c *ClientWithResponses) GetSubdivisionsWithResponse(ctx context.Context, params *GetSubdivisionsParams, reqEditors ...RequestEditorFn) (*GetSubdivisionsResponse, error) {
	rsp, err := c.GetSubdivisions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubdivisionsResponse(rsp)
}

// ParseGetCountriesResponse parses an HTTP response from a GetCountriesWithResponse call
func ParseGetCountriesResponse(rsp *http.Response) (*GetCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CountryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetLanguagesResponse parses an HTTP response from a GetLanguagesWithResponse call
func ParseGetLanguagesResponse(rsp *http.Response) (*GetLanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicHolidaysResponse parses an HTTP response from a GetPublicHolidaysWithResponse call
func ParseGetPublicHolidaysResponse(rsp *http.Response) (*GetPublicHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HolidayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPublicHolidaysByDateResponse parses an HTTP response from a GetPublicHolidaysByDateWithResponse call
func ParseGetPublicHolidaysByDateResponse(rsp *http.Response) (*GetPublicHolidaysByDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicHolidaysByDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HolidayByDateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSchoolHolidaysResponse parses an HTTP response from a GetSchoolHolidaysWithResponse call
func ParseGetSchoolHolidaysResponse(rsp *http.Response) (*GetSchoolHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchoolHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HolidayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSchoolHolidaysByDateResponse parses an HTTP response from a GetSchoolHolidaysByDateWithResponse call
func ParseGetSchoolHolidaysByDateResponse(rsp *http.Response) (*GetSchoolHolidaysByDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchoolHolidaysByDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HolidayByDateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetStatisticsPublicHolidaysResponse parses an HTTP response from a GetStatisticsPublicHolidaysWithResponse call
func ParseGetStatisticsPublicHolidaysResponse(rsp *http.Response) (*GetStatisticsPublicHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticsPublicHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StatisticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetStatisticsSchoolHolidaysResponse parses an HTTP response from a GetStatisticsSchoolHolidaysWithResponse call
func ParseGetStatisticsSchoolHolidaysResponse(rsp *http.Response) (*GetStatisticsSchoolHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticsSchoolHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StatisticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSubdivisionsResponse parses an HTTP response from a GetSubdivisionsWithResponse call
func ParseGetSubdivisionsResponse(rsp *http.Response) (*GetSubdivisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubdivisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubdivisionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
