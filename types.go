// Package openholidays provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package openholidays

import (
	"encoding/json"
	"fmt"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for HolidayType.
const (
	BackToSchool HolidayType = "BackToSchool"
	Bank         HolidayType = "Bank"
	EndOfLessons HolidayType = "EndOfLessons"
	Optional     HolidayType = "Optional"
	Public       HolidayType = "Public"
	School       HolidayType = "School"
)

// Defines values for RegionalScope.
const (
	Local    RegionalScope = "Local"
	National RegionalScope = "National"
	Regional RegionalScope = "Regional"
)

// Defines values for TemporalScope.
const (
	FullDay TemporalScope = "FullDay"
	HalfDay TemporalScope = "HalfDay"
)

// CountryReference Representation of a country reference
type CountryReference struct {
	// IsoCode Country ISO code
	IsoCode string `json:"isoCode"`
}

// CountryResponse Representation of a country as defined in ISO 3166-1
type CountryResponse struct {
	// IsoCode ISO 3166-1 country code
	IsoCode string `json:"isoCode"`

	// Name Localized country names
	Name []LocalizedText `json:"name"`

	// OfficialLanguages Official ISO-639-1 language codes
	OfficialLanguages []string `json:"officialLanguages"`
}

// HolidayByDateResponse Representation of a holiday by date
type HolidayByDateResponse struct {
	// Comment Additional localized comments
	Comment *[]LocalizedText `json:"comment"`

	// Country Representation of a country reference
	Country *CountryReference `json:"country,omitempty"`

	// Id Unqiue holiday id
	Id openapi_types.UUID `json:"id"`

	// Name Localized names of the holiday
	Name []LocalizedText `json:"name"`

	// Nationwide Is the holiday nationwide?
	Nationwide bool `json:"nationwide"`

	// RegionalScope Regional scope of a holdiay
	RegionalScope *RegionalScope `json:"regionalScope,omitempty"`

	// Subdivisions List of subdivision references
	Subdivisions []SubdivisionReference `json:"subdivisions"`

	// TemporalScope Temporal scope of a holdiay
	TemporalScope *TemporalScope `json:"temporalScope,omitempty"`

	// Type Type of holiday
	Type *HolidayType `json:"type,omitempty"`
}

// HolidayResponse Representation of a holiday
type HolidayResponse struct {
	// Comment Additional localized comments
	Comment *[]LocalizedText `json:"comment"`

	// EndDate End date of the holiday
	EndDate openapi_types.Date `json:"endDate"`

	// Id Unqiue holiday id
	Id openapi_types.UUID `json:"id"`

	// Name Localized names of the holiday
	Name []LocalizedText `json:"name"`

	// Nationwide Is the holiday nationwide?
	Nationwide bool `json:"nationwide"`

	// RegionalScope Regional scope of a holdiay
	RegionalScope *RegionalScope `json:"regionalScope,omitempty"`

	// StartDate Start date of the holiday
	StartDate openapi_types.Date `json:"startDate"`

	// Subdivisions List of subdivision references
	Subdivisions []SubdivisionReference `json:"subdivisions"`

	// TemporalScope Temporal scope of a holdiay
	TemporalScope *TemporalScope `json:"temporalScope,omitempty"`

	// Type Type of holiday
	Type *HolidayType `json:"type,omitempty"`
}

// HolidayType Type of holiday
type HolidayType string

// LanguageResponse Representation of a language as defined in ISO-639-1
type LanguageResponse struct {
	// IsoCode ISO-639-1 language code
	IsoCode string `json:"isoCode"`

	// Name Localized language names
	Name []LocalizedText `json:"name"`
}

// LocalizedText A localized text string
type LocalizedText struct {
	// Language ISO-639-1 language code
	Language string `json:"language"`

	// Text The localized text
	Text string `json:"text"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               *string                `json:"detail"`
	Instance             *string                `json:"instance"`
	Status               *int32                 `json:"status"`
	Title                *string                `json:"title"`
	Type                 *string                `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RegionalScope Regional scope of a holdiay
type RegionalScope string

// StatisticsResponse Statistical data of the holidays database
type StatisticsResponse struct {
	// OldestStartDate The oldest holiday start date in the database
	OldestStartDate openapi_types.Date `json:"oldestStartDate"`

	// YoungestStartDate The youngest holiday start date in the database
	YoungestStartDate openapi_types.Date `json:"youngestStartDate"`
}

// SubdivisionReference Representation of a subdivision reference
type SubdivisionReference struct {
	// Code Subdivision code
	Code string `json:"code"`

	// ShortName Short name for display
	ShortName string `json:"shortName"`
}

// SubdivisionResponse Representation of a subdivision
type SubdivisionResponse struct {
	// Category Localized categories of the subdivision
	Category []LocalizedText `json:"category"`

	// Children Child subdivisions
	Children *[]SubdivisionResponse `json:"children"`

	// Code Subdivision code
	Code string `json:"code"`

	// Comment Localized comments of the subdivision
	Comment []LocalizedText `json:"comment"`

	// IsoCode ISO 3166-2 subdivision code (if defined)
	IsoCode *string `json:"isoCode"`

	// Name Localized names of the subdivision
	Name []LocalizedText `json:"name"`

	// OfficialLanguages Official languages as ISO-639-1 codes
	OfficialLanguages []string `json:"officialLanguages"`

	// ShortName Short name for display
	ShortName string `json:"shortName"`
}

// TemporalScope Temporal scope of a holdiay
type TemporalScope string

// GetCountriesParams defines parameters for GetCountries.
type GetCountriesParams struct {
	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`
}

// GetLanguagesParams defines parameters for GetLanguages.
type GetLanguagesParams struct {
	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`
}

// GetPublicHolidaysParams defines parameters for GetPublicHolidays.
type GetPublicHolidaysParams struct {
	// CountryIsoCode ISO 3166-1 code of the country
	CountryIsoCode string `form:"countryIsoCode" json:"countryIsoCode"`

	// ValidFrom Start of the date range
	ValidFrom openapi_types.Date `form:"validFrom" json:"validFrom"`

	// ValidTo End of the date range
	ValidTo openapi_types.Date `form:"validTo" json:"validTo"`

	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`

	// SubdivisionCode Code of the subdivision or empty
	SubdivisionCode *string `form:"subdivisionCode,omitempty" json:"subdivisionCode,omitempty"`
}

// GetPublicHolidaysByDateParams defines parameters for GetPublicHolidaysByDate.
type GetPublicHolidaysByDateParams struct {
	// Date Date of interest
	Date openapi_types.Date `form:"date" json:"date"`

	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`
}

// GetSchoolHolidaysParams defines parameters for GetSchoolHolidays.
type GetSchoolHolidaysParams struct {
	// CountryIsoCode ISO 3166-1 code of the country
	CountryIsoCode string `form:"countryIsoCode" json:"countryIsoCode"`

	// ValidFrom Start of the date range
	ValidFrom openapi_types.Date `form:"validFrom" json:"validFrom"`

	// ValidTo End of the date range
	ValidTo openapi_types.Date `form:"validTo" json:"validTo"`

	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`

	// SubdivisionCode Code of the subdivision or empty
	SubdivisionCode *string `form:"subdivisionCode,omitempty" json:"subdivisionCode,omitempty"`
}

// GetSchoolHolidaysByDateParams defines parameters for GetSchoolHolidaysByDate.
type GetSchoolHolidaysByDateParams struct {
	// Date Date of interest
	Date openapi_types.Date `form:"date" json:"date"`

	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`
}

// GetStatisticsPublicHolidaysParams defines parameters for GetStatisticsPublicHolidays.
type GetStatisticsPublicHolidaysParams struct {
	// CountryIsoCode ISO 3166-1 code of the country
	CountryIsoCode string `form:"countryIsoCode" json:"countryIsoCode"`

	// SubdivisionCode Code of the subdivision or empty
	SubdivisionCode *string `form:"subdivisionCode,omitempty" json:"subdivisionCode,omitempty"`
}

// GetStatisticsSchoolHolidaysParams defines parameters for GetStatisticsSchoolHolidays.
type GetStatisticsSchoolHolidaysParams struct {
	// CountryIsoCode ISO 3166-1 code of the country
	CountryIsoCode string `form:"countryIsoCode" json:"countryIsoCode"`

	// SubdivisionCode Code of the subdivision or empty
	SubdivisionCode *string `form:"subdivisionCode,omitempty" json:"subdivisionCode,omitempty"`
}

// GetSubdivisionsParams defines parameters for GetSubdivisions.
type GetSubdivisionsParams struct {
	// CountryIsoCode ISO 3166-1 code of the country
	CountryIsoCode string `form:"countryIsoCode" json:"countryIsoCode"`

	// LanguageIsoCode ISO-639-1 code of a language or empty
	LanguageIsoCode *string `form:"languageIsoCode,omitempty" json:"languageIsoCode,omitempty"`
}

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
